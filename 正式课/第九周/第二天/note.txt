一、使用gitHub搭建自己的个人博客(发布项目->移动端简历)
  gitHub其实就是一个网站(https://github.com),我们可以在这个网站上注册一个账号,以后在自己的账号下可以创建多个GIT仓库,用来管理和维护我们产品的源代码,或者是基于仓库发布一些我么自己的产品页面==>我们把本地的文件上传到gitHub，或者是把gitHub中的文件下载到本地，都是通过GIT命令进行操作的

  [重要性]
  gitHub是全世界最权威的一个项目源代码管理平台，我们平时知道的前端框架、类库、插件等在gitHub上基本都有托管;我们以后可以通过观看它们的源代码来学习如何使用;
  目前很多的大公司面试还是比较看重你的gitHub账号的,他们可以看看你仓库中的项目源代码,看看你贡献的代码使用率,看一下你的粉丝等,在看看你平时都在研究那些框架类库等...

  [在gitHub中修改个人信息]


  [删除某一个仓库]
  点击某一个仓库,在仓库Settings选项中的最底部找到‘Delete this repository’点击就可以完成删除(在删除的时候需要我们填写自己仓库的名字)

二、基于gitHub创建自己的个人博客
   1、创建一个仓库
     README.MD ->是对仓库或者仓库中托管项目的一个描述,可能是介绍,也可能是使用的API文档;README.MD文件中的内容采用MARKDOWN语法编写(http://wowubuntu.com/markdown/index.html);

     当仓库创建完成后,我们的仓库会存在一个主分支master

   2、基于当前的仓库发布自己的个人博客/发布自己的项目
     Settings -> (options)GitHub Pages -> Launch Automatic page generator -> Continue to layouts -> Publish page

     Your project page has been created at http://zhouxiaotian.github.io/resume/. 这个地址就是以后访问项目的地址,其实这个地址请求的资源文件是index.html,也就是全部的地址是：http://zhouxiaotian.github.io/resume/index.html 在gitHub中如果请求的资源文件是index.html的话,我们可以省略不写(除了是index以外其他的都不可以省略)

     在仓库中多了一个gh-pages这个分支,我们对外展示的项目/博客的源代码源文件都在这个分支下管理(gh-pages分支是专门用来管理博客的，我们以后上传、下载、管理等操作都是在这个分支下进行的)

   3、把仓库的默认分支修改为gh-pages
     Settings -> (Branches) Default branch -> 修改默认分支为gh-pages即可

   4、把自己开发的简历源代码上传到gitHub上(具体说就是仓库的gh-pages这个分支下),用我们最新的简历代码替换默认生成的博客代码
      ->把仓库中的代码先克隆到本地一份
        $ git clone  git地址

      ->把默认生成的源代码删除掉即可,把我们自己需要展示给别人的项目源代码放到文件夹中

      ->把自己最新的文件内容上传到gitHub/resume/gh-pages分支下
        $ git add -A
        $ git commit -m'备注信息'
        $ git push origin gh-pages  ->输入用户名和密码提交即可

      以后本地文件有修改了,我们重复这三步的操作,把最新的文件上传即可

   5、把地址生成二维码
     http://cli.im/


三、本地存储
   在JS中我们把一部分信息存储到“当前浏览器” “某一个域/源”中的的某一个位置,浏览器关闭或者页面关闭,存储的信息不消失,以后重新打开页面依然可以从上一次存储信息的位置把内容获取到...
   =>谷歌下存储的信息,IE浏览器无法获取
   =>京东在谷歌下存储的信息,百度再看谷歌下也获取不到

   本地存储可以实现不同页面之间的信息通讯，在A页面中操作的一些信息，我们把它存储到本地，这样的话在B页面的时候我们可以再从本地把信息获取到（还有页面跳转的时候我们URL地址栏的问号传参其实也是在实现页面和页面之间的通信）

   在当前市场上最常用的本地存储方式：COOKIE、webStorage(localStorage/sessionStorage)  =>你们之前听过的session/数据库等都是服务器存储


四、COOKIE PK webStorage
   cookie兼容所有的浏览器,而webStorage是H5新增加的,不兼容IE低版本浏览器

   不管是使用cookie还是webStorage存储的内容，都可以在谷歌浏览器控制台的Resources选项中查看到(没有Resources选项的我们可以使用Application选项查看)

   1、使用的语法
    [cookie]
      document.cookie=''设置/修改(NAME/VALUE/EXPIRES/DOMAIN/PATH...)
      document.cookie   获取(还需要把全部的信息使用正则匹配出我们需要的结果)
      删除的原理就是设置cookie信息存储的时间是今天以前一个时间即可,这样cookie就过期了,也就删除了

    [webStorage] localStorage/sessionStorage
      localStorage.setItem([key],[value]) 设置/修改
      localStorage.getItem([key])         获取
      localStorage.removeItem([key])      移除
      localStorage.clear() 它是把当前域/源下所有的使用localStorage存储的内容都移除掉
      localStorage.key([index]) 通过索引获取指定位置存储的KEY

      localStorage是本地存储,不管是刷新页面还是关掉页面,存储的信息都不会消失
      sessionStorage是本地会话存储,只要页面关掉,证明会话结束了,浏览器会把它存储的信息也清空掉

    2、安全
      cookie和localStorage都是明文存储,所以在使用它们做存储的时候保持以下的原则：
      ->尽量不要存储过于重要的信息(用户账号和密码、银行卡账号、身份证、手机...)
      ->如果非要存储的话,我们需要把存储的信息进行加密
         不可逆转加密:密码... 最常用的是MD5,但是其它也可以自己回去扩展一下
         可逆转加密:手机、银行卡号、用户名... 自己回去查去,每个公司一般都用自己加密解密方法来做

    3、cookie pk localStorage
      [cookie]
        ->兼容所有的浏览器
        ->cookie存储的大小有限制,一般同一个源下最多只能存储4KB的大小
        ->cookie有过期的时间(过期时间自己可以设置,一般不要超过一个月)
        ->我们使用360或者浏览器自带清理垃圾的功能，很多时候会把cookie清除掉;用户可能出于安全的角度禁止存储cookie,例如：无痕浏览器、隐身模式...
        ->cookie不是单纯的本地存储,它的相关操作其实和服务器之间还有千丝万缕的联系

      [localStorage]
        ->不兼容IE低版本的浏览器
        ->localStorage也会存在大小的限制,一般同一个源下只能存储5MB的内容
        ->localStorage不存在过期时间,只要我们不删除,就会永久存储到本地
        ->安全卫士和浏览器的清除功能不能清除localStorage;无痕浏览器等模式对于localStorage没有影响;
        ->localStorage是正统的本地存储,和服务器没有任何的关系


    =>自动登录OR记住用户名密码


    如果是做移动端的开发，那么我们使用cookie或者localStorage都可以；移动端或者是不需要考虑兼容的PC端，我们使用localStorage还可以做一个数据缓存的优化....


























